// Mocks generated by Mockito 5.4.2 from annotations
// in untitled/test/features/products/presentation/widgets/products_widgets_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart_bloc/rxdart_bloc.dart' as _i2;
import 'package:untitled/core/models/error_model.dart' as _i7;
import 'package:untitled/features/products/data/model/products_model.dart'
    as _i6;
import 'package:untitled/features/products/domain/repositories/products_repo.dart'
    as _i3;
import 'package:untitled/features/products/presentation/bloc/products_bloc.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseModel_0<T> extends _i1.SmartFake implements _i2.BaseModel<T> {
  _FakeBaseModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBehaviorSubject_1<T> extends _i1.SmartFake
    implements _i2.BehaviorSubject<T> {
  _FakeBehaviorSubject_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductsRepo_2 extends _i1.SmartFake implements _i3.ProductsRepo {
  _FakeProductsRepo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePublishSubject_3<T> extends _i1.SmartFake
    implements _i2.PublishSubject<T> {
  _FakePublishSubject_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductsRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsRepo extends _i1.Mock implements _i3.ProductsRepo {
  MockProductsRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.BaseModel<dynamic>> getProducts() => (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue:
            _i4.Future<_i2.BaseModel<dynamic>>.value(_FakeBaseModel_0<dynamic>(
          this,
          Invocation.method(
            #getProducts,
            [],
          ),
        )),
      ) as _i4.Future<_i2.BaseModel<dynamic>>);
  @override
  _i4.Future<_i2.BaseModel<dynamic>> getProducts2() => (super.noSuchMethod(
        Invocation.method(
          #getProducts2,
          [],
        ),
        returnValue:
            _i4.Future<_i2.BaseModel<dynamic>>.value(_FakeBaseModel_0<dynamic>(
          this,
          Invocation.method(
            #getProducts2,
            [],
          ),
        )),
      ) as _i4.Future<_i2.BaseModel<dynamic>>);
}

/// A class which mocks [ProductsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsBloc extends _i1.Mock implements _i5.ProductsBloc {
  MockProductsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BehaviorSubject<_i2.RequestState> get requestStateSubject =>
      (super.noSuchMethod(
        Invocation.getter(#requestStateSubject),
        returnValue: _FakeBehaviorSubject_1<_i2.RequestState>(
          this,
          Invocation.getter(#requestStateSubject),
        ),
      ) as _i2.BehaviorSubject<_i2.RequestState>);
  @override
  set requestStateSubject(
          _i2.BehaviorSubject<_i2.RequestState>? _requestStateSubject) =>
      super.noSuchMethod(
        Invocation.setter(
          #requestStateSubject,
          _requestStateSubject,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.ProductsRepo get productsRepo => (super.noSuchMethod(
        Invocation.getter(#productsRepo),
        returnValue: _FakeProductsRepo_2(
          this,
          Invocation.getter(#productsRepo),
        ),
      ) as _i3.ProductsRepo);
  @override
  set productsRepo(_i3.ProductsRepo? _productsRepo) => super.noSuchMethod(
        Invocation.setter(
          #productsRepo,
          _productsRepo,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.PublishSubject<_i6.ProductsModel> get successSubject =>
      (super.noSuchMethod(
        Invocation.getter(#successSubject),
        returnValue: _FakePublishSubject_3<_i6.ProductsModel>(
          this,
          Invocation.getter(#successSubject),
        ),
      ) as _i2.PublishSubject<_i6.ProductsModel>);
  @override
  set successSubject(_i2.PublishSubject<_i6.ProductsModel>? _successSubject) =>
      super.noSuchMethod(
        Invocation.setter(
          #successSubject,
          _successSubject,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.PublishSubject<_i7.ErrorModel> get errorSubject => (super.noSuchMethod(
        Invocation.getter(#errorSubject),
        returnValue: _FakePublishSubject_3<_i7.ErrorModel>(
          this,
          Invocation.getter(#errorSubject),
        ),
      ) as _i2.PublishSubject<_i7.ErrorModel>);
  @override
  set errorSubject(_i2.PublishSubject<_i7.ErrorModel>? _errorSubject) =>
      super.noSuchMethod(
        Invocation.setter(
          #errorSubject,
          _errorSubject,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Stream<_i6.ProductsModel> get successStream => (super.noSuchMethod(
        Invocation.getter(#successStream),
        returnValue: _i4.Stream<_i6.ProductsModel>.empty(),
      ) as _i4.Stream<_i6.ProductsModel>);
  @override
  _i4.Stream<_i7.ErrorModel> get errorStream => (super.noSuchMethod(
        Invocation.getter(#errorStream),
        returnValue: _i4.Stream<_i7.ErrorModel>.empty(),
      ) as _i4.Stream<_i7.ErrorModel>);
  @override
  _i4.Future<dynamic> checkIsolate() => (super.noSuchMethod(
        Invocation.method(
          #checkIsolate,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<_i2.BaseModel<dynamic>> getProducts() => (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue:
            _i4.Future<_i2.BaseModel<dynamic>>.value(_FakeBaseModel_0<dynamic>(
          this,
          Invocation.method(
            #getProducts,
            [],
          ),
        )),
      ) as _i4.Future<_i2.BaseModel<dynamic>>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
